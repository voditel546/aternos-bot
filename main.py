import asyncio
from datetime import datetime
from threading import Thread

from flask import Flask
from mcstatus import JavaServer
from telegram import Bot

# üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è
BOT_TOKEN = '7968761400:AAGlkkcNI7XiSIWJK7DP6l9Dpk94jAKEF70'
CHAT_ID = -1002424017400
ADDRESS = "Na4narkamana.aternos.me"
PORT = 41833  # ‚ö†Ô∏è –ü–µ—Ä–µ–≤—ñ—Ä –Ω–∞ —Å–∞–π—Ç—ñ Aternos, –º–æ–∂–µ –∑–º—ñ–Ω—é–≤–∞—Ç–∏—Å—è

# ü§ñ –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è
bot = Bot(token=BOT_TOKEN)
server = JavaServer(ADDRESS, PORT)
was_online = None  # –°—Ç–∞—Ä—Ç–æ–≤–µ –∑–Ω–∞—á–µ–Ω–Ω—è (—â–µ –Ω–µ –∑–Ω–∞—î–º–æ)

# üåê Flask –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
app = Flask(__name__)
@app.route("/")
def index():
    return "Bot is running!"

def run_flask():
    app.run(host="0.0.0.0", port=8000)

# üîç –§—É–Ω–∫—Ü—ñ—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞
async def check_server():
    global was_online
    now = datetime.now().strftime("%H:%M")
    try:
        status = server.status()
        print(f"[{now}] –°–µ—Ä–≤–µ—Ä –æ–Ω–ª–∞–π–Ω ({status.players.online} –≥—Ä–∞–≤—Ü—ñ–≤)")

        if was_online is False or was_online is None:
            await asyncio.to_thread(bot.send_message, chat_id=CHAT_ID,
                                    text=f"üü¢ –ß–∞—Å {now}\n–°–µ—Ä–≤–µ—Ä –≤—ñ–¥–∫—Ä–∏–≤—Å—è!")
        was_online = True

    except Exception as e:
        print(f"[{now}] –°–µ—Ä–≤–µ—Ä –æ—Ñ–ª–∞–π–Ω –∞–±–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π: {e}")
        if was_online is True or was_online is None:
            await asyncio.to_thread(bot.send_message, chat_id=CHAT_ID,
                                    text=f"üî¥ –ß–∞—Å {now}\n–°–µ—Ä–≤–µ—Ä –∑–∞–∫—Ä–∏–≤—Å—è!")
        was_online = False

# üîÅ –ì–æ–ª–æ–≤–Ω–∏–π —Ü–∏–∫–ª
async def main_loop():
    while True:
        await check_server()
        await asyncio.sleep(60)

# üöÄ –°—Ç–∞—Ä—Ç Flask + –±–æ—Ç–∞
if __name__ == "__main__":
    Thread(target=run_flask).start()
    asyncio.run(main_loop())
